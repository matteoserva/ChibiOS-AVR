   1               		.file	"pwm_lld.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               	.global	__vector_15
  11               	__vector_15:
  12               	.LFB8:
  13               		.file 1 "../../../os/hal/platforms/AVR/pwm_lld.c"
   1:../../../os/hal/platforms/AVR/pwm_lld.c **** /*
   2:../../../os/hal/platforms/AVR/pwm_lld.c ****     ChibiOS/RT - Copyright (C) 2006,2007,2008,2009,2010,
   3:../../../os/hal/platforms/AVR/pwm_lld.c ****                  2011,2012 Giovanni Di Sirio.
   4:../../../os/hal/platforms/AVR/pwm_lld.c **** 
   5:../../../os/hal/platforms/AVR/pwm_lld.c ****     This file is part of ChibiOS/RT.
   6:../../../os/hal/platforms/AVR/pwm_lld.c **** 
   7:../../../os/hal/platforms/AVR/pwm_lld.c ****     ChibiOS/RT is free software; you can redistribute it and/or modify
   8:../../../os/hal/platforms/AVR/pwm_lld.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/hal/platforms/AVR/pwm_lld.c ****     the Free Software Foundation; either version 3 of the License, or
  10:../../../os/hal/platforms/AVR/pwm_lld.c ****     (at your option) any later version.
  11:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  12:../../../os/hal/platforms/AVR/pwm_lld.c ****     ChibiOS/RT is distributed in the hope that it will be useful,
  13:../../../os/hal/platforms/AVR/pwm_lld.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:../../../os/hal/platforms/AVR/pwm_lld.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:../../../os/hal/platforms/AVR/pwm_lld.c ****     GNU General Public License for more details.
  16:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  17:../../../os/hal/platforms/AVR/pwm_lld.c ****     You should have received a copy of the GNU General Public License
  18:../../../os/hal/platforms/AVR/pwm_lld.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  19:../../../os/hal/platforms/AVR/pwm_lld.c **** */
  20:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  21:../../../os/hal/platforms/AVR/pwm_lld.c **** /**
  22:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @file    templates/pwm_lld.c
  23:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @brief   PWM Driver subsystem low level driver source template.
  24:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
  25:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @addtogroup PWM
  26:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @{
  27:../../../os/hal/platforms/AVR/pwm_lld.c ****  */
  28:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  29:../../../os/hal/platforms/AVR/pwm_lld.c **** #include "ch.h"
  30:../../../os/hal/platforms/AVR/pwm_lld.c **** #include "hal.h"
  31:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  32:../../../os/hal/platforms/AVR/pwm_lld.c **** #if HAL_USE_PWM || defined(__DOXYGEN__)
  33:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  34:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  35:../../../os/hal/platforms/AVR/pwm_lld.c **** /* Driver local definitions.                                                 */
  36:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  37:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  38:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  39:../../../os/hal/platforms/AVR/pwm_lld.c **** /* Driver exported variables.                                                */
  40:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  41:../../../os/hal/platforms/AVR/pwm_lld.c **** /** @brief PWM driver identifiers.*/
  42:../../../os/hal/platforms/AVR/pwm_lld.c **** #if USE_AVR_PWM1 || defined(__DOXYGEN__)
  43:../../../os/hal/platforms/AVR/pwm_lld.c **** PWMDriver PWMD1;
  44:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
  45:../../../os/hal/platforms/AVR/pwm_lld.c **** #if USE_AVR_PWM2 || defined(__DOXYGEN__)
  46:../../../os/hal/platforms/AVR/pwm_lld.c **** PWMDriver PWMD2;
  47:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
  48:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  49:../../../os/hal/platforms/AVR/pwm_lld.c **** /* Driver local variables.                                                   */
  50:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  51:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  52:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  53:../../../os/hal/platforms/AVR/pwm_lld.c **** /* Driver local functions.                                                   */
  54:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  55:../../../os/hal/platforms/AVR/pwm_lld.c **** static void pwm_configure_hw_channel(volatile uint8_t * TCCRnA, uint8_t COMnx1,uint8_t COMnx0, pwmm
  56:../../../os/hal/platforms/AVR/pwm_lld.c **** {
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
  58:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_HIGH ==mode )
  59:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    *TCCRnA |=  ((1<<COMnx1) | (0<<COMnx0)); //non inverting mode
  60:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_LOW ==mode)
  61:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    *TCCRnA |= (1<<COMnx1) | (1<<COMnx0); //inverting mode 
  62:../../../os/hal/platforms/AVR/pwm_lld.c **** }
  63:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  64:../../../os/hal/platforms/AVR/pwm_lld.c **** /* Driver interrupt handlers.                                                */
  65:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
  66:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  67:../../../os/hal/platforms/AVR/pwm_lld.c **** /*
  68:../../../os/hal/platforms/AVR/pwm_lld.c ****  * interrupt for compare1&2 and clock overflow. pwmd1 & pwmd2
  69:../../../os/hal/platforms/AVR/pwm_lld.c ****  * 
  70:../../../os/hal/platforms/AVR/pwm_lld.c ****  * 
  71:../../../os/hal/platforms/AVR/pwm_lld.c ****  */
  72:../../../os/hal/platforms/AVR/pwm_lld.c **** 
  73:../../../os/hal/platforms/AVR/pwm_lld.c **** CH_IRQ_HANDLER(TIMER1_OVF_vect) {
  14               		.loc 1 73 0
  15 0000 1F92      		push r1
  16               	.LCFI0:
  17 0002 0F92      		push r0
  18               	.LCFI1:
  19 0004 0FB6      		in r0,__SREG__
  20 0006 0F92      		push r0
  21 0008 1124      		clr __zero_reg__
  22 000a 2F93      		push r18
  23               	.LCFI2:
  24 000c 3F93      		push r19
  25               	.LCFI3:
  26 000e 4F93      		push r20
  27               	.LCFI4:
  28 0010 5F93      		push r21
  29               	.LCFI5:
  30 0012 6F93      		push r22
  31               	.LCFI6:
  32 0014 7F93      		push r23
  33               	.LCFI7:
  34 0016 8F93      		push r24
  35               	.LCFI8:
  36 0018 9F93      		push r25
  37               	.LCFI9:
  38 001a AF93      		push r26
  39               	.LCFI10:
  40 001c BF93      		push r27
  41               	.LCFI11:
  42 001e EF93      		push r30
  43               	.LCFI12:
  44 0020 FF93      		push r31
  45               	.LCFI13:
  46               	/* prologue: Signal */
  47               	/* frame size = 0 */
  48               	/* stack size = 15 */
  49               	.L__stack_usage = 15
  74:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_PROLOGUE();
  50               		.loc 1 74 0
  75:../../../os/hal/platforms/AVR/pwm_lld.c ****       PWMD1.config->callback(&PWMD1);
  51               		.loc 1 75 0
  52 0022 E091 0000 		lds r30,PWMD1+1
  53 0026 F091 0000 		lds r31,PWMD1+1+1
  54 002a 0680      		ldd __tmp_reg__,Z+6
  55 002c F781      		ldd r31,Z+7
  56 002e E02D      		mov r30,__tmp_reg__
  57 0030 80E0      		ldi r24,lo8(PWMD1)
  58 0032 90E0      		ldi r25,hi8(PWMD1)
  59 0034 0995      		icall
  60               	.LVL0:
  76:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_EPILOGUE();
  61               		.loc 1 76 0
  62 0036 0E94 0000 		call chSchIsPreemptionRequired
  63               	.LVL1:
  64 003a 8111      		cpse r24,__zero_reg__
  65               		.loc 1 76 0 is_stmt 0 discriminator 1
  66 003c 0E94 0000 		call chSchDoReschedule
  67               	.LVL2:
  68               	.L1:
  69               	/* epilogue start */
  77:../../../os/hal/platforms/AVR/pwm_lld.c **** }
  70               		.loc 1 77 0 is_stmt 1
  71 0040 FF91      		pop r31
  72 0042 EF91      		pop r30
  73 0044 BF91      		pop r27
  74 0046 AF91      		pop r26
  75 0048 9F91      		pop r25
  76 004a 8F91      		pop r24
  77 004c 7F91      		pop r23
  78 004e 6F91      		pop r22
  79 0050 5F91      		pop r21
  80 0052 4F91      		pop r20
  81 0054 3F91      		pop r19
  82 0056 2F91      		pop r18
  83 0058 0F90      		pop r0
  84 005a 0FBE      		out __SREG__,r0
  85 005c 0F90      		pop r0
  86 005e 1F90      		pop r1
  87 0060 1895      		reti
  88               	.LFE8:
  90               	.global	__vector_13
  92               	__vector_13:
  93               	.LFB9:
  78:../../../os/hal/platforms/AVR/pwm_lld.c **** CH_IRQ_HANDLER(TIMER1_COMPA_vect) {
  94               		.loc 1 78 0
  95 0062 1F92      		push r1
  96               	.LCFI14:
  97 0064 0F92      		push r0
  98               	.LCFI15:
  99 0066 0FB6      		in r0,__SREG__
 100 0068 0F92      		push r0
 101 006a 1124      		clr __zero_reg__
 102 006c 2F93      		push r18
 103               	.LCFI16:
 104 006e 3F93      		push r19
 105               	.LCFI17:
 106 0070 4F93      		push r20
 107               	.LCFI18:
 108 0072 5F93      		push r21
 109               	.LCFI19:
 110 0074 6F93      		push r22
 111               	.LCFI20:
 112 0076 7F93      		push r23
 113               	.LCFI21:
 114 0078 8F93      		push r24
 115               	.LCFI22:
 116 007a 9F93      		push r25
 117               	.LCFI23:
 118 007c AF93      		push r26
 119               	.LCFI24:
 120 007e BF93      		push r27
 121               	.LCFI25:
 122 0080 EF93      		push r30
 123               	.LCFI26:
 124 0082 FF93      		push r31
 125               	.LCFI27:
 126               	/* prologue: Signal */
 127               	/* frame size = 0 */
 128               	/* stack size = 15 */
 129               	.L__stack_usage = 15
  79:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_PROLOGUE();
 130               		.loc 1 79 0
  80:../../../os/hal/platforms/AVR/pwm_lld.c ****       PWMD1.config->channels[0].callback(&PWMD1);
 131               		.loc 1 80 0
 132 0084 E091 0000 		lds r30,PWMD1+1
 133 0088 F091 0000 		lds r31,PWMD1+1+1
 134 008c 0484      		ldd __tmp_reg__,Z+12
 135 008e F585      		ldd r31,Z+13
 136 0090 E02D      		mov r30,__tmp_reg__
 137 0092 80E0      		ldi r24,lo8(PWMD1)
 138 0094 90E0      		ldi r25,hi8(PWMD1)
 139 0096 0995      		icall
 140               	.LVL3:
  81:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_EPILOGUE();
 141               		.loc 1 81 0
 142 0098 0E94 0000 		call chSchIsPreemptionRequired
 143               	.LVL4:
 144 009c 8111      		cpse r24,__zero_reg__
 145               		.loc 1 81 0 is_stmt 0 discriminator 1
 146 009e 0E94 0000 		call chSchDoReschedule
 147               	.LVL5:
 148               	.L7:
 149               	/* epilogue start */
  82:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 150               		.loc 1 82 0 is_stmt 1
 151 00a2 FF91      		pop r31
 152 00a4 EF91      		pop r30
 153 00a6 BF91      		pop r27
 154 00a8 AF91      		pop r26
 155 00aa 9F91      		pop r25
 156 00ac 8F91      		pop r24
 157 00ae 7F91      		pop r23
 158 00b0 6F91      		pop r22
 159 00b2 5F91      		pop r21
 160 00b4 4F91      		pop r20
 161 00b6 3F91      		pop r19
 162 00b8 2F91      		pop r18
 163 00ba 0F90      		pop r0
 164 00bc 0FBE      		out __SREG__,r0
 165 00be 0F90      		pop r0
 166 00c0 1F90      		pop r1
 167 00c2 1895      		reti
 168               	.LFE9:
 170               	.global	__vector_14
 172               	__vector_14:
 173               	.LFB10:
  83:../../../os/hal/platforms/AVR/pwm_lld.c **** CH_IRQ_HANDLER(TIMER1_COMPB_vect) {
 174               		.loc 1 83 0
 175 00c4 1F92      		push r1
 176               	.LCFI28:
 177 00c6 0F92      		push r0
 178               	.LCFI29:
 179 00c8 0FB6      		in r0,__SREG__
 180 00ca 0F92      		push r0
 181 00cc 1124      		clr __zero_reg__
 182 00ce 2F93      		push r18
 183               	.LCFI30:
 184 00d0 3F93      		push r19
 185               	.LCFI31:
 186 00d2 4F93      		push r20
 187               	.LCFI32:
 188 00d4 5F93      		push r21
 189               	.LCFI33:
 190 00d6 6F93      		push r22
 191               	.LCFI34:
 192 00d8 7F93      		push r23
 193               	.LCFI35:
 194 00da 8F93      		push r24
 195               	.LCFI36:
 196 00dc 9F93      		push r25
 197               	.LCFI37:
 198 00de AF93      		push r26
 199               	.LCFI38:
 200 00e0 BF93      		push r27
 201               	.LCFI39:
 202 00e2 EF93      		push r30
 203               	.LCFI40:
 204 00e4 FF93      		push r31
 205               	.LCFI41:
 206               	/* prologue: Signal */
 207               	/* frame size = 0 */
 208               	/* stack size = 15 */
 209               	.L__stack_usage = 15
  84:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_PROLOGUE();
 210               		.loc 1 84 0
  85:../../../os/hal/platforms/AVR/pwm_lld.c ****       PWMD1.config->channels[1].callback(&PWMD1);
 211               		.loc 1 85 0
 212 00e6 E091 0000 		lds r30,PWMD1+1
 213 00ea F091 0000 		lds r31,PWMD1+1+1
 214 00ee 0288      		ldd __tmp_reg__,Z+18
 215 00f0 F389      		ldd r31,Z+19
 216 00f2 E02D      		mov r30,__tmp_reg__
 217 00f4 80E0      		ldi r24,lo8(PWMD1)
 218 00f6 90E0      		ldi r25,hi8(PWMD1)
 219 00f8 0995      		icall
 220               	.LVL6:
  86:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_EPILOGUE();
 221               		.loc 1 86 0
 222 00fa 0E94 0000 		call chSchIsPreemptionRequired
 223               	.LVL7:
 224 00fe 8111      		cpse r24,__zero_reg__
 225               		.loc 1 86 0 is_stmt 0 discriminator 1
 226 0100 0E94 0000 		call chSchDoReschedule
 227               	.LVL8:
 228               	.L12:
 229               	/* epilogue start */
  87:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 230               		.loc 1 87 0 is_stmt 1
 231 0104 FF91      		pop r31
 232 0106 EF91      		pop r30
 233 0108 BF91      		pop r27
 234 010a AF91      		pop r26
 235 010c 9F91      		pop r25
 236 010e 8F91      		pop r24
 237 0110 7F91      		pop r23
 238 0112 6F91      		pop r22
 239 0114 5F91      		pop r21
 240 0116 4F91      		pop r20
 241 0118 3F91      		pop r19
 242 011a 2F91      		pop r18
 243 011c 0F90      		pop r0
 244 011e 0FBE      		out __SREG__,r0
 245 0120 0F90      		pop r0
 246 0122 1F90      		pop r1
 247 0124 1895      		reti
 248               	.LFE10:
 250               	.global	__vector_11
 252               	__vector_11:
 253               	.LFB11:
  88:../../../os/hal/platforms/AVR/pwm_lld.c **** CH_IRQ_HANDLER(TIMER2_OVF_vect) {
 254               		.loc 1 88 0
 255 0126 1F92      		push r1
 256               	.LCFI42:
 257 0128 0F92      		push r0
 258               	.LCFI43:
 259 012a 0FB6      		in r0,__SREG__
 260 012c 0F92      		push r0
 261 012e 1124      		clr __zero_reg__
 262 0130 2F93      		push r18
 263               	.LCFI44:
 264 0132 3F93      		push r19
 265               	.LCFI45:
 266 0134 4F93      		push r20
 267               	.LCFI46:
 268 0136 5F93      		push r21
 269               	.LCFI47:
 270 0138 6F93      		push r22
 271               	.LCFI48:
 272 013a 7F93      		push r23
 273               	.LCFI49:
 274 013c 8F93      		push r24
 275               	.LCFI50:
 276 013e 9F93      		push r25
 277               	.LCFI51:
 278 0140 AF93      		push r26
 279               	.LCFI52:
 280 0142 BF93      		push r27
 281               	.LCFI53:
 282 0144 EF93      		push r30
 283               	.LCFI54:
 284 0146 FF93      		push r31
 285               	.LCFI55:
 286               	/* prologue: Signal */
 287               	/* frame size = 0 */
 288               	/* stack size = 15 */
 289               	.L__stack_usage = 15
  89:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_PROLOGUE();
 290               		.loc 1 89 0
  90:../../../os/hal/platforms/AVR/pwm_lld.c ****       PWMD2.config->callback(&PWMD2);
 291               		.loc 1 90 0
 292 0148 E091 0000 		lds r30,PWMD2+1
 293 014c F091 0000 		lds r31,PWMD2+1+1
 294 0150 0680      		ldd __tmp_reg__,Z+6
 295 0152 F781      		ldd r31,Z+7
 296 0154 E02D      		mov r30,__tmp_reg__
 297 0156 80E0      		ldi r24,lo8(PWMD2)
 298 0158 90E0      		ldi r25,hi8(PWMD2)
 299 015a 0995      		icall
 300               	.LVL9:
  91:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_EPILOGUE();
 301               		.loc 1 91 0
 302 015c 0E94 0000 		call chSchIsPreemptionRequired
 303               	.LVL10:
 304 0160 8111      		cpse r24,__zero_reg__
 305               		.loc 1 91 0 is_stmt 0 discriminator 1
 306 0162 0E94 0000 		call chSchDoReschedule
 307               	.LVL11:
 308               	.L17:
 309               	/* epilogue start */
  92:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 310               		.loc 1 92 0 is_stmt 1
 311 0166 FF91      		pop r31
 312 0168 EF91      		pop r30
 313 016a BF91      		pop r27
 314 016c AF91      		pop r26
 315 016e 9F91      		pop r25
 316 0170 8F91      		pop r24
 317 0172 7F91      		pop r23
 318 0174 6F91      		pop r22
 319 0176 5F91      		pop r21
 320 0178 4F91      		pop r20
 321 017a 3F91      		pop r19
 322 017c 2F91      		pop r18
 323 017e 0F90      		pop r0
 324 0180 0FBE      		out __SREG__,r0
 325 0182 0F90      		pop r0
 326 0184 1F90      		pop r1
 327 0186 1895      		reti
 328               	.LFE11:
 330               	.global	__vector_9
 332               	__vector_9:
 333               	.LFB12:
  93:../../../os/hal/platforms/AVR/pwm_lld.c **** CH_IRQ_HANDLER(TIMER2_COMPA_vect) {
 334               		.loc 1 93 0
 335 0188 1F92      		push r1
 336               	.LCFI56:
 337 018a 0F92      		push r0
 338               	.LCFI57:
 339 018c 0FB6      		in r0,__SREG__
 340 018e 0F92      		push r0
 341 0190 1124      		clr __zero_reg__
 342 0192 2F93      		push r18
 343               	.LCFI58:
 344 0194 3F93      		push r19
 345               	.LCFI59:
 346 0196 4F93      		push r20
 347               	.LCFI60:
 348 0198 5F93      		push r21
 349               	.LCFI61:
 350 019a 6F93      		push r22
 351               	.LCFI62:
 352 019c 7F93      		push r23
 353               	.LCFI63:
 354 019e 8F93      		push r24
 355               	.LCFI64:
 356 01a0 9F93      		push r25
 357               	.LCFI65:
 358 01a2 AF93      		push r26
 359               	.LCFI66:
 360 01a4 BF93      		push r27
 361               	.LCFI67:
 362 01a6 EF93      		push r30
 363               	.LCFI68:
 364 01a8 FF93      		push r31
 365               	.LCFI69:
 366               	/* prologue: Signal */
 367               	/* frame size = 0 */
 368               	/* stack size = 15 */
 369               	.L__stack_usage = 15
  94:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_PROLOGUE();
 370               		.loc 1 94 0
  95:../../../os/hal/platforms/AVR/pwm_lld.c ****       PWMD2.config->channels[0].callback(&PWMD2);
 371               		.loc 1 95 0
 372 01aa E091 0000 		lds r30,PWMD2+1
 373 01ae F091 0000 		lds r31,PWMD2+1+1
 374 01b2 0484      		ldd __tmp_reg__,Z+12
 375 01b4 F585      		ldd r31,Z+13
 376 01b6 E02D      		mov r30,__tmp_reg__
 377 01b8 80E0      		ldi r24,lo8(PWMD2)
 378 01ba 90E0      		ldi r25,hi8(PWMD2)
 379 01bc 0995      		icall
 380               	.LVL12:
  96:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_EPILOGUE();
 381               		.loc 1 96 0
 382 01be 0E94 0000 		call chSchIsPreemptionRequired
 383               	.LVL13:
 384 01c2 8111      		cpse r24,__zero_reg__
 385               		.loc 1 96 0 is_stmt 0 discriminator 1
 386 01c4 0E94 0000 		call chSchDoReschedule
 387               	.LVL14:
 388               	.L22:
 389               	/* epilogue start */
  97:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 390               		.loc 1 97 0 is_stmt 1
 391 01c8 FF91      		pop r31
 392 01ca EF91      		pop r30
 393 01cc BF91      		pop r27
 394 01ce AF91      		pop r26
 395 01d0 9F91      		pop r25
 396 01d2 8F91      		pop r24
 397 01d4 7F91      		pop r23
 398 01d6 6F91      		pop r22
 399 01d8 5F91      		pop r21
 400 01da 4F91      		pop r20
 401 01dc 3F91      		pop r19
 402 01de 2F91      		pop r18
 403 01e0 0F90      		pop r0
 404 01e2 0FBE      		out __SREG__,r0
 405 01e4 0F90      		pop r0
 406 01e6 1F90      		pop r1
 407 01e8 1895      		reti
 408               	.LFE12:
 410               	.global	__vector_10
 412               	__vector_10:
 413               	.LFB13:
  98:../../../os/hal/platforms/AVR/pwm_lld.c **** CH_IRQ_HANDLER(TIMER2_COMPB_vect) {
 414               		.loc 1 98 0
 415 01ea 1F92      		push r1
 416               	.LCFI70:
 417 01ec 0F92      		push r0
 418               	.LCFI71:
 419 01ee 0FB6      		in r0,__SREG__
 420 01f0 0F92      		push r0
 421 01f2 1124      		clr __zero_reg__
 422 01f4 2F93      		push r18
 423               	.LCFI72:
 424 01f6 3F93      		push r19
 425               	.LCFI73:
 426 01f8 4F93      		push r20
 427               	.LCFI74:
 428 01fa 5F93      		push r21
 429               	.LCFI75:
 430 01fc 6F93      		push r22
 431               	.LCFI76:
 432 01fe 7F93      		push r23
 433               	.LCFI77:
 434 0200 8F93      		push r24
 435               	.LCFI78:
 436 0202 9F93      		push r25
 437               	.LCFI79:
 438 0204 AF93      		push r26
 439               	.LCFI80:
 440 0206 BF93      		push r27
 441               	.LCFI81:
 442 0208 EF93      		push r30
 443               	.LCFI82:
 444 020a FF93      		push r31
 445               	.LCFI83:
 446               	/* prologue: Signal */
 447               	/* frame size = 0 */
 448               	/* stack size = 15 */
 449               	.L__stack_usage = 15
  99:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_PROLOGUE();
 450               		.loc 1 99 0
 100:../../../os/hal/platforms/AVR/pwm_lld.c ****       PWMD2.config->channels[1].callback(&PWMD2);
 451               		.loc 1 100 0
 452 020c E091 0000 		lds r30,PWMD2+1
 453 0210 F091 0000 		lds r31,PWMD2+1+1
 454 0214 0288      		ldd __tmp_reg__,Z+18
 455 0216 F389      		ldd r31,Z+19
 456 0218 E02D      		mov r30,__tmp_reg__
 457 021a 80E0      		ldi r24,lo8(PWMD2)
 458 021c 90E0      		ldi r25,hi8(PWMD2)
 459 021e 0995      		icall
 460               	.LVL15:
 101:../../../os/hal/platforms/AVR/pwm_lld.c ****     CH_IRQ_EPILOGUE();
 461               		.loc 1 101 0
 462 0220 0E94 0000 		call chSchIsPreemptionRequired
 463               	.LVL16:
 464 0224 8111      		cpse r24,__zero_reg__
 465               		.loc 1 101 0 is_stmt 0 discriminator 1
 466 0226 0E94 0000 		call chSchDoReschedule
 467               	.LVL17:
 468               	.L27:
 469               	/* epilogue start */
 102:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 470               		.loc 1 102 0 is_stmt 1
 471 022a FF91      		pop r31
 472 022c EF91      		pop r30
 473 022e BF91      		pop r27
 474 0230 AF91      		pop r26
 475 0232 9F91      		pop r25
 476 0234 8F91      		pop r24
 477 0236 7F91      		pop r23
 478 0238 6F91      		pop r22
 479 023a 5F91      		pop r21
 480 023c 4F91      		pop r20
 481 023e 3F91      		pop r19
 482 0240 2F91      		pop r18
 483 0242 0F90      		pop r0
 484 0244 0FBE      		out __SREG__,r0
 485 0246 0F90      		pop r0
 486 0248 1F90      		pop r1
 487 024a 1895      		reti
 488               	.LFE13:
 490               	.global	pwm_lld_init
 492               	pwm_lld_init:
 493               	.LFB14:
 103:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 104:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 105:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 106:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
 107:../../../os/hal/platforms/AVR/pwm_lld.c **** /* Driver exported functions.                                                */
 108:../../../os/hal/platforms/AVR/pwm_lld.c **** /*===========================================================================*/
 109:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 110:../../../os/hal/platforms/AVR/pwm_lld.c **** /**
 111:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @brief   Low level PWM driver initialization.
 112:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 113:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @notapi
 114:../../../os/hal/platforms/AVR/pwm_lld.c ****  */
 115:../../../os/hal/platforms/AVR/pwm_lld.c **** void pwm_lld_init(void) {
 494               		.loc 1 115 0
 495               	/* prologue: function */
 496               	/* frame size = 0 */
 497               	/* stack size = 0 */
 498               	.L__stack_usage = 0
 116:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 117:../../../os/hal/platforms/AVR/pwm_lld.c **** #if USE_AVR_PWM1 || defined(__DOXYGEN__)
 118:../../../os/hal/platforms/AVR/pwm_lld.c ****   pwmObjectInit(&PWMD1);
 499               		.loc 1 118 0
 500 024c 80E0      		ldi r24,lo8(PWMD1)
 501 024e 90E0      		ldi r25,hi8(PWMD1)
 502 0250 0E94 0000 		call pwmObjectInit
 503               	.LVL18:
 119:../../../os/hal/platforms/AVR/pwm_lld.c ****   TCCR1A = (0<<WGM11) | (1<<WGM10);   //fast pwm 8 bit  
 504               		.loc 1 119 0
 505 0254 81E0      		ldi r24,lo8(1)
 506 0256 8093 8000 		sts 128,r24
 120:../../../os/hal/platforms/AVR/pwm_lld.c ****   TCCR1B = (1<<WGM12) | (0<<WGM13);  //fast pwm 8 bit
 507               		.loc 1 120 0
 508 025a 88E0      		ldi r24,lo8(8)
 509 025c 8093 8100 		sts 129,r24
 121:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
 122:../../../os/hal/platforms/AVR/pwm_lld.c ****   #if USE_AVR_PWM2 || defined(__DOXYGEN__)
 123:../../../os/hal/platforms/AVR/pwm_lld.c ****     pwmObjectInit(&PWMD2);
 510               		.loc 1 123 0
 511 0260 80E0      		ldi r24,lo8(PWMD2)
 512 0262 90E0      		ldi r25,hi8(PWMD2)
 513 0264 0E94 0000 		call pwmObjectInit
 514               	.LVL19:
 124:../../../os/hal/platforms/AVR/pwm_lld.c ****     TCCR2A = (1<<WGM21) | (1<<WGM20);   //fast pwm 8 bit
 515               		.loc 1 124 0
 516 0268 83E0      		ldi r24,lo8(3)
 517 026a 8093 B000 		sts 176,r24
 125:../../../os/hal/platforms/AVR/pwm_lld.c ****     TCCR2B = (0<<WGM22);  //fast pwm 8 bit
 518               		.loc 1 125 0
 519 026e 1092 B100 		sts 177,__zero_reg__
 520 0272 0895      		ret
 521               	.LFE14:
 523               	.global	pwm_lld_start
 525               	pwm_lld_start:
 526               	.LFB15:
 126:../../../os/hal/platforms/AVR/pwm_lld.c ****   #endif
 127:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 128:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 129:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 130:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 131:../../../os/hal/platforms/AVR/pwm_lld.c **** /**
 132:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @brief   Configures and activates the PWM peripheral.
 133:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 134:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] pwmp      pointer to the @p PWMDriver object
 135:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 136:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @notapi
 137:../../../os/hal/platforms/AVR/pwm_lld.c ****  */
 138:../../../os/hal/platforms/AVR/pwm_lld.c **** void pwm_lld_start(PWMDriver *pwmp) {
 527               		.loc 1 138 0
 528               	.LVL20:
 529               	/* prologue: function */
 530               	/* frame size = 0 */
 531               	/* stack size = 0 */
 532               	.L__stack_usage = 0
 139:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 140:../../../os/hal/platforms/AVR/pwm_lld.c ****   if ( pwmp->state == PWM_STOP) {
 533               		.loc 1 140 0
 534 0274 FC01      		movw r30,r24
 535 0276 2081      		ld r18,Z
 536 0278 2130      		cpi r18,lo8(1)
 537 027a 01F0      		breq .L45
 538               	.LVL21:
 539               	.L33:
 540 027c 0895      		ret
 541               	.LVL22:
 542               	.L45:
 141:../../../os/hal/platforms/AVR/pwm_lld.c ****     /* Clock activation.*/
 142:../../../os/hal/platforms/AVR/pwm_lld.c ****     
 143:../../../os/hal/platforms/AVR/pwm_lld.c ****     
 144:../../../os/hal/platforms/AVR/pwm_lld.c **** #if USE_AVR_PWM1 || defined(__DOXYGEN__)
 145:../../../os/hal/platforms/AVR/pwm_lld.c ****       if(pwmp == &PWMD1)
 543               		.loc 1 145 0
 544 027e F0E0      		ldi r31,hi8(PWMD1)
 545 0280 8030      		cpi r24,lo8(PWMD1)
 546 0282 9F07      		cpc r25,r31
 547 0284 01F0      		breq .L46
 146:../../../os/hal/platforms/AVR/pwm_lld.c ****       {//TODO frequency
 147:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TCCR1B |= (1<<CS12) |(0<<CS11) | (1<<CS10); //parti col no prescaling
 148:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(pwmp->config->callback != NULL)
 149:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    TIMSK1 |= (1<<TOIE1);
 150:../../../os/hal/platforms/AVR/pwm_lld.c ****       }
 151:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
 152:../../../os/hal/platforms/AVR/pwm_lld.c ****       
 153:../../../os/hal/platforms/AVR/pwm_lld.c **** #if USE_AVR_PWM2 || defined(__DOXYGEN__)
 154:../../../os/hal/platforms/AVR/pwm_lld.c ****       if(pwmp == &PWMD2)
 548               		.loc 1 154 0
 549 0286 8050      		subi r24,lo8(PWMD2)
 550 0288 9040      		sbci r25,hi8(PWMD2)
 551 028a 01F4      		brne .L33
 155:../../../os/hal/platforms/AVR/pwm_lld.c ****       {
 156:../../../os/hal/platforms/AVR/pwm_lld.c **** 	      TCCR2B |= (0<<CS22) |(0<<CS21) | (1<<CS20); //parti col no prescaling
 552               		.loc 1 156 0
 553 028c 8091 B100 		lds r24,177
 554               	.LVL23:
 555 0290 8160      		ori r24,lo8(1)
 556 0292 8093 B100 		sts 177,r24
 157:../../../os/hal/platforms/AVR/pwm_lld.c **** 	      if(pwmp->config->callback != NULL)
 557               		.loc 1 157 0
 558 0296 E091 0000 		lds r30,PWMD2+1
 559 029a F091 0000 		lds r31,PWMD2+1+1
 560               	.LVL24:
 561 029e 8681      		ldd r24,Z+6
 562 02a0 9781      		ldd r25,Z+7
 563 02a2 892B      		or r24,r25
 564 02a4 01F0      		breq .L33
 158:../../../os/hal/platforms/AVR/pwm_lld.c **** 		TIMSK2 |= (1<<TOIE2);
 565               		.loc 1 158 0
 566 02a6 8091 7000 		lds r24,112
 567 02aa 8160      		ori r24,lo8(1)
 568 02ac 8093 7000 		sts 112,r24
 569 02b0 0895      		ret
 570               	.LVL25:
 571               	.L46:
 147:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TCCR1B |= (1<<CS12) |(0<<CS11) | (1<<CS10); //parti col no prescaling
 572               		.loc 1 147 0
 573 02b2 8091 8100 		lds r24,129
 574               	.LVL26:
 575 02b6 8560      		ori r24,lo8(5)
 576 02b8 8093 8100 		sts 129,r24
 148:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(pwmp->config->callback != NULL)
 577               		.loc 1 148 0
 578 02bc E091 0000 		lds r30,PWMD1+1
 579 02c0 F091 0000 		lds r31,PWMD1+1+1
 580               	.LVL27:
 581 02c4 8681      		ldd r24,Z+6
 582 02c6 9781      		ldd r25,Z+7
 583 02c8 892B      		or r24,r25
 584 02ca 01F0      		breq .L33
 149:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    TIMSK1 |= (1<<TOIE1);
 585               		.loc 1 149 0
 586 02cc 8091 6F00 		lds r24,111
 587 02d0 8160      		ori r24,lo8(1)
 588 02d2 8093 6F00 		sts 111,r24
 589 02d6 0895      		ret
 590               	.LFE15:
 592               	.global	pwm_lld_stop
 594               	pwm_lld_stop:
 595               	.LFB16:
 159:../../../os/hal/platforms/AVR/pwm_lld.c ****       }
 160:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
 161:../../../os/hal/platforms/AVR/pwm_lld.c ****   }
 162:../../../os/hal/platforms/AVR/pwm_lld.c ****   /* Configuration.*/
 163:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 164:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 165:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 166:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 167:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 168:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 169:../../../os/hal/platforms/AVR/pwm_lld.c **** /**
 170:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @brief   Deactivates the PWM peripheral.
 171:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 172:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] pwmp      pointer to the @p PWMDriver object
 173:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 174:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @notapi
 175:../../../os/hal/platforms/AVR/pwm_lld.c ****  */
 176:../../../os/hal/platforms/AVR/pwm_lld.c **** void pwm_lld_stop(PWMDriver *pwmp) {
 596               		.loc 1 176 0
 597               	.LVL28:
 598               	/* prologue: function */
 599               	/* frame size = 0 */
 600               	/* stack size = 0 */
 601               	.L__stack_usage = 0
 177:../../../os/hal/platforms/AVR/pwm_lld.c **** 	#if USE_AVR_PWM1 || defined(__DOXYGEN__)
 178:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(pwmp == &PWMD1)
 602               		.loc 1 178 0
 603 02d8 20E0      		ldi r18,hi8(PWMD1)
 604 02da 8030      		cpi r24,lo8(PWMD1)
 605 02dc 9207      		cpc r25,r18
 606 02de 01F0      		breq .L50
 179:../../../os/hal/platforms/AVR/pwm_lld.c **** 	{
 180:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TCCR1B &= ~((1<<CS12) |(1<<CS11) | (1<<CS10)); //parti col no prescaling
 181:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TIMSK1 = 0;
 182:../../../os/hal/platforms/AVR/pwm_lld.c **** 	}
 183:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
 184:../../../os/hal/platforms/AVR/pwm_lld.c **** 	#if USE_AVR_PWM2 || defined(__DOXYGEN__)
 185:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(pwmp == &PWMD2)
 607               		.loc 1 185 0
 608 02e0 8050      		subi r24,lo8(PWMD2)
 609 02e2 9040      		sbci r25,hi8(PWMD2)
 610 02e4 01F0      		breq .L51
 611 02e6 0895      		ret
 612               	.L51:
 186:../../../os/hal/platforms/AVR/pwm_lld.c **** 	{
 187:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    TCCR2B &= ~((1<<CS22) |(1<<CS21) | (1<<CS20)); //parti col no prescaling
 613               		.loc 1 187 0
 614 02e8 8091 B100 		lds r24,177
 615               	.LVL29:
 616 02ec 887F      		andi r24,lo8(-8)
 617 02ee 8093 B100 		sts 177,r24
 188:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    TIMSK2 = 0;
 618               		.loc 1 188 0
 619 02f2 1092 7000 		sts 112,__zero_reg__
 620 02f6 0895      		ret
 621               	.LVL30:
 622               	.L50:
 180:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TCCR1B &= ~((1<<CS12) |(1<<CS11) | (1<<CS10)); //parti col no prescaling
 623               		.loc 1 180 0
 624 02f8 8091 8100 		lds r24,129
 625               	.LVL31:
 626 02fc 887F      		andi r24,lo8(-8)
 627 02fe 8093 8100 		sts 129,r24
 181:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TIMSK1 = 0;
 628               		.loc 1 181 0
 629 0302 1092 6F00 		sts 111,__zero_reg__
 630 0306 0895      		ret
 631               	.LFE16:
 633               	.global	pwm_lld_change_period
 635               	pwm_lld_change_period:
 636               	.LFB17:
 189:../../../os/hal/platforms/AVR/pwm_lld.c **** 	}
 190:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
 191:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 192:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 193:../../../os/hal/platforms/AVR/pwm_lld.c **** /**
 194:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @brief   Changes the period the PWM peripheral.
 195:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @details This function changes the period of a PWM unit that has already
 196:../../../os/hal/platforms/AVR/pwm_lld.c ****  *          been activated using @p pwmStart().
 197:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 198:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @post    The PWM unit period is changed to the new value.
 199:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @note    The function has effect at the next cycle start.
 200:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @note    If a period is specified that is shorter than the pulse width
 201:../../../os/hal/platforms/AVR/pwm_lld.c ****  *          programmed in one of the channels then the behavior is not
 202:../../../os/hal/platforms/AVR/pwm_lld.c ****  *          guaranteed.
 203:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 204:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 205:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] period    new cycle time in ticks
 206:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 207:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @notapi
 208:../../../os/hal/platforms/AVR/pwm_lld.c ****  */
 209:../../../os/hal/platforms/AVR/pwm_lld.c **** void pwm_lld_change_period(PWMDriver *pwmp, pwmcnt_t period) {
 637               		.loc 1 209 0
 638               	.LVL32:
 639               	/* prologue: function */
 640               	/* frame size = 0 */
 641               	/* stack size = 0 */
 642               	.L__stack_usage = 0
 643 0308 0895      		ret
 644               	.LFE17:
 646               	.global	pwm_lld_enable_channel
 648               	pwm_lld_enable_channel:
 649               	.LFB18:
 210:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 211:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 212:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 213:../../../os/hal/platforms/AVR/pwm_lld.c **** /**
 214:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @brief   Enables a PWM channel.
 215:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 216:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @post    The channel is active using the specified configuration.
 217:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @note    Depending on the hardware implementation this function has
 218:../../../os/hal/platforms/AVR/pwm_lld.c ****  *          effect starting on the next cycle (recommended implementation)
 219:../../../os/hal/platforms/AVR/pwm_lld.c ****  *          or immediately (fallback implementation).
 220:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 221:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 222:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] channel   PWM channel identifier (0...PWM_CHANNELS-1)
 223:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] width     PWM pulse width as clock pulses number
 224:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 225:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @notapi
 226:../../../os/hal/platforms/AVR/pwm_lld.c ****  */
 227:../../../os/hal/platforms/AVR/pwm_lld.c **** void pwm_lld_enable_channel(PWMDriver *pwmp,
 228:../../../os/hal/platforms/AVR/pwm_lld.c ****                             pwmchannel_t channel,
 229:../../../os/hal/platforms/AVR/pwm_lld.c ****                             pwmcnt_t width) {
 650               		.loc 1 229 0
 651               	.LVL33:
 652               		.loc 1 229 0
 653 030a BF92      		push r11
 654               	.LCFI84:
 655 030c CF92      		push r12
 656               	.LCFI85:
 657 030e DF92      		push r13
 658               	.LCFI86:
 659 0310 EF92      		push r14
 660               	.LCFI87:
 661 0312 FF92      		push r15
 662               	.LCFI88:
 663 0314 0F93      		push r16
 664               	.LCFI89:
 665 0316 1F93      		push r17
 666               	.LCFI90:
 667 0318 CF93      		push r28
 668               	.LCFI91:
 669 031a DF93      		push r29
 670               	.LCFI92:
 671               	/* prologue: function */
 672               	/* frame size = 0 */
 673               	/* stack size = 9 */
 674               	.L__stack_usage = 9
 675 031c EC01      		movw r28,r24
 676 031e F62E      		mov r15,r22
 677               	.LVL34:
 230:../../../os/hal/platforms/AVR/pwm_lld.c ****   uint32_t val = width;
 231:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 232:../../../os/hal/platforms/AVR/pwm_lld.c ****   val *= 256;
 678               		.loc 1 232 0
 679 0320 CA01      		movw r24,r20
 680               	.LVL35:
 681 0322 A0E0      		ldi r26,0
 682 0324 B0E0      		ldi r27,0
 683 0326 6627      		clr r22
 684 0328 782F      		mov r23,r24
 685 032a 892F      		mov r24,r25
 686 032c 9A2F      		mov r25,r26
 687               	.LVL36:
 233:../../../os/hal/platforms/AVR/pwm_lld.c ****   val /= (uint32_t)pwmp->period;
 688               		.loc 1 233 0
 689 032e 2B81      		ldd r18,Y+3
 690 0330 3C81      		ldd r19,Y+4
 691 0332 40E0      		ldi r20,0
 692 0334 50E0      		ldi r21,0
 693 0336 0E94 0000 		call __udivmodsi4
 694               	.LVL37:
 695 033a 8901      		movw r16,r18
 696 033c 9A01      		movw r18,r20
 697 033e 0F3F      		cpi r16,-1
 698 0340 1105      		cpc r17,__zero_reg__
 699 0342 2105      		cpc r18,__zero_reg__
 700 0344 3105      		cpc r19,__zero_reg__
 701 0346 01F0      		breq .L54
 702 0348 00F0      		brlo .L54
 703 034a 0FEF      		ldi r16,lo8(-1)
 704 034c 10E0      		ldi r17,0
 705 034e 20E0      		ldi r18,0
 706 0350 30E0      		ldi r19,0
 707               	.L54:
 234:../../../os/hal/platforms/AVR/pwm_lld.c ****   if(val > 0x00FF)
 235:../../../os/hal/platforms/AVR/pwm_lld.c ****     val = 0xFF;
 236:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 237:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 238:../../../os/hal/platforms/AVR/pwm_lld.c ****   #if USE_AVR_PWM1 || defined(__DOXYGEN__)
 239:../../../os/hal/platforms/AVR/pwm_lld.c ****   if(pwmp == &PWMD1)
 708               		.loc 1 239 0
 709 0352 80E0      		ldi r24,hi8(PWMD1)
 710 0354 C030      		cpi r28,lo8(PWMD1)
 711 0356 D807      		cpc r29,r24
 712               	.LVL38:
 713 0358 01F4      		brne .+2
 714 035a 00C0      		rjmp .L78
 240:../../../os/hal/platforms/AVR/pwm_lld.c ****       {   
 241:../../../os/hal/platforms/AVR/pwm_lld.c **** 	pwm_configure_hw_channel(&TCCR1A,7-2*channel,6-2*channel,pwmp->config->channels[channel].mode);
 242:../../../os/hal/platforms/AVR/pwm_lld.c **** 	TIMSK1 |= (1<< (channel + 1));
 243:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(pwmp->config->channels[channel].callback != NULL)
 244:../../../os/hal/platforms/AVR/pwm_lld.c **** 	switch(channel){
 245:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  case 0: OCR1A = val;break;
 246:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  case 1: OCR1B = val;break;
 247:../../../os/hal/platforms/AVR/pwm_lld.c **** #if PWM_CHANNELS>2
 248:../../../os/hal/platforms/AVR/pwm_lld.c ****           case 2: OCR1C = val;break;
 249:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
 250:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  
 251:../../../os/hal/platforms/AVR/pwm_lld.c **** 	}
 252:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 253:../../../os/hal/platforms/AVR/pwm_lld.c ****       }
 254:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 255:../../../os/hal/platforms/AVR/pwm_lld.c ****   #endif
 256:../../../os/hal/platforms/AVR/pwm_lld.c ****   #if USE_AVR_PWM2 || defined(__DOXYGEN__)
 257:../../../os/hal/platforms/AVR/pwm_lld.c ****   if(pwmp == &PWMD2)
 715               		.loc 1 257 0
 716 035c C050      		subi r28,lo8(PWMD2)
 717 035e D040      		sbci r29,hi8(PWMD2)
 718 0360 01F0      		breq .L79
 719               	.LVL39:
 720               	.L53:
 721               	/* epilogue start */
 258:../../../os/hal/platforms/AVR/pwm_lld.c ****       {
 259:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(channel == 0)
 260:../../../os/hal/platforms/AVR/pwm_lld.c **** 	{
 261:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR2A,COM2A1,COM2A0,pwmp->config->channels[0].mode);
 262:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(pwmp->config->channels[0].callback != NULL)
 263:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    TIMSK2 |= (1<<OCIE2A);
 264:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    OCR2A = val;
 265:../../../os/hal/platforms/AVR/pwm_lld.c **** 	}
 266:../../../os/hal/platforms/AVR/pwm_lld.c **** 	else
 267:../../../os/hal/platforms/AVR/pwm_lld.c **** 	{ //channel == 1
 268:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR2A,COM2B1,COM2B0,pwmp->config->channels[1].mode);
 269:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(pwmp->config->channels[1].callback != NULL)
 270:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    TIMSK2 |= (1<<OCIE2B);
 271:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    OCR2B = val;
 272:../../../os/hal/platforms/AVR/pwm_lld.c **** 	}
 273:../../../os/hal/platforms/AVR/pwm_lld.c ****       }
 274:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 275:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
 276:../../../os/hal/platforms/AVR/pwm_lld.c ****   
 277:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 278:../../../os/hal/platforms/AVR/pwm_lld.c **** }
 722               		.loc 1 278 0
 723 0362 DF91      		pop r29
 724 0364 CF91      		pop r28
 725 0366 1F91      		pop r17
 726 0368 0F91      		pop r16
 727 036a FF90      		pop r15
 728               	.LVL40:
 729 036c EF90      		pop r14
 730 036e DF90      		pop r13
 731 0370 CF90      		pop r12
 732 0372 BF90      		pop r11
 733 0374 0895      		ret
 734               	.LVL41:
 735               	.L79:
 261:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR2A,COM2A1,COM2A0,pwmp->config->channels[0].mode);
 736               		.loc 1 261 0
 737 0376 E091 0000 		lds r30,PWMD2+1
 738 037a F091 0000 		lds r31,PWMD2+1+1
 259:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(channel == 0)
 739               		.loc 1 259 0
 740 037e F110      		cpse r15,__zero_reg__
 741 0380 00C0      		rjmp .L62
 261:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR2A,COM2A1,COM2A0,pwmp->config->channels[0].mode);
 742               		.loc 1 261 0
 743 0382 8085      		ldd r24,Z+8
 744 0384 9185      		ldd r25,Z+9
 745 0386 A285      		ldd r26,Z+10
 746 0388 B385      		ldd r27,Z+11
 747               	.LVL42:
 748               	.LBB16:
 749               	.LBB17:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 750               		.loc 1 57 0
 751 038a 4091 B000 		lds r20,176
 752 038e 4F73      		andi r20,lo8(63)
 753 0390 4093 B000 		sts 176,r20
  58:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_HIGH ==mode )
 754               		.loc 1 58 0
 755 0394 8130      		cpi r24,1
 756 0396 9105      		cpc r25,__zero_reg__
 757 0398 A105      		cpc r26,__zero_reg__
 758 039a B105      		cpc r27,__zero_reg__
 759 039c 01F4      		brne .+2
 760 039e 00C0      		rjmp .L80
  60:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_LOW ==mode)
 761               		.loc 1 60 0
 762 03a0 0297      		sbiw r24,2
 763 03a2 A105      		cpc r26,__zero_reg__
 764 03a4 B105      		cpc r27,__zero_reg__
 765 03a6 01F4      		brne .+2
 766 03a8 00C0      		rjmp .L81
 767               	.LVL43:
 768               	.L64:
 769               	.LBE17:
 770               	.LBE16:
 262:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(pwmp->config->channels[0].callback != NULL)
 771               		.loc 1 262 0
 772 03aa 8485      		ldd r24,Z+12
 773 03ac 9585      		ldd r25,Z+13
 774 03ae 892B      		or r24,r25
 775 03b0 01F0      		breq .L65
 263:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    TIMSK2 |= (1<<OCIE2A);
 776               		.loc 1 263 0
 777 03b2 8091 7000 		lds r24,112
 778 03b6 8260      		ori r24,lo8(2)
 779 03b8 8093 7000 		sts 112,r24
 780               	.L65:
 264:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    OCR2A = val;
 781               		.loc 1 264 0
 782 03bc 0093 B300 		sts 179,r16
 783 03c0 00C0      		rjmp .L53
 784               	.LVL44:
 785               	.L62:
 268:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR2A,COM2B1,COM2B0,pwmp->config->channels[1].mode);
 786               		.loc 1 268 0
 787 03c2 8685      		ldd r24,Z+14
 788 03c4 9785      		ldd r25,Z+15
 789 03c6 A089      		ldd r26,Z+16
 790 03c8 B189      		ldd r27,Z+17
 791               	.LVL45:
 792               	.LBB20:
 793               	.LBB21:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 794               		.loc 1 57 0
 795 03ca 4091 B000 		lds r20,176
 796 03ce 4F7C      		andi r20,lo8(-49)
 797 03d0 4093 B000 		sts 176,r20
  58:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_HIGH ==mode )
 798               		.loc 1 58 0
 799 03d4 8130      		cpi r24,1
 800 03d6 9105      		cpc r25,__zero_reg__
 801 03d8 A105      		cpc r26,__zero_reg__
 802 03da B105      		cpc r27,__zero_reg__
 803 03dc 01F4      		brne .+2
 804 03de 00C0      		rjmp .L82
  60:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_LOW ==mode)
 805               		.loc 1 60 0
 806 03e0 0297      		sbiw r24,2
 807 03e2 A105      		cpc r26,__zero_reg__
 808 03e4 B105      		cpc r27,__zero_reg__
 809 03e6 01F4      		brne .+2
 810 03e8 00C0      		rjmp .L83
 811               	.LVL46:
 812               	.L67:
 813               	.LBE21:
 814               	.LBE20:
 269:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(pwmp->config->channels[1].callback != NULL)
 815               		.loc 1 269 0
 816 03ea 8289      		ldd r24,Z+18
 817 03ec 9389      		ldd r25,Z+19
 818 03ee 892B      		or r24,r25
 819 03f0 01F0      		breq .L68
 270:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    TIMSK2 |= (1<<OCIE2B);
 820               		.loc 1 270 0
 821 03f2 8091 7000 		lds r24,112
 822 03f6 8460      		ori r24,lo8(4)
 823 03f8 8093 7000 		sts 112,r24
 824               	.L68:
 271:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    OCR2B = val;
 825               		.loc 1 271 0
 826 03fc 0093 B400 		sts 180,r16
 827 0400 00C0      		rjmp .L53
 828               	.LVL47:
 829               	.L78:
 241:../../../os/hal/platforms/AVR/pwm_lld.c **** 	pwm_configure_hw_channel(&TCCR1A,7-2*channel,6-2*channel,pwmp->config->channels[channel].mode);
 830               		.loc 1 241 0
 831 0402 4F2D      		mov r20,r15
 832 0404 50E0      		ldi r21,0
 833 0406 C091 0000 		lds r28,PWMD1+1
 834 040a D091 0000 		lds r29,PWMD1+1+1
 835               	.LVL48:
 836 040e FA01      		movw r30,r20
 837 0410 EE0F      		lsl r30
 838 0412 FF1F      		rol r31
 839 0414 DF01      		movw r26,r30
 840 0416 A40F      		add r26,r20
 841 0418 B51F      		adc r27,r21
 842 041a AA0F      		lsl r26
 843 041c BB1F      		rol r27
 844 041e AC0F      		add r26,r28
 845 0420 BD1F      		adc r27,r29
 846 0422 1896      		adiw r26,8
 847 0424 8D91      		ld r24,X+
 848 0426 9D91      		ld r25,X+
 849 0428 0D90      		ld __tmp_reg__,X+
 850 042a BC91      		ld r27,X
 851 042c A02D      		mov r26,__tmp_reg__
 852               	.LVL49:
 853               	.LBB24:
 854               	.LBB25:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 855               		.loc 1 57 0
 856 042e B090 8000 		lds r11,128
 857               	.LBE25:
 858               	.LBE24:
 241:../../../os/hal/platforms/AVR/pwm_lld.c **** 	pwm_configure_hw_channel(&TCCR1A,7-2*channel,6-2*channel,pwmp->config->channels[channel].mode);
 859               		.loc 1 241 0
 860 0432 6F2D      		mov r22,r15
 861 0434 6195      		neg r22
 862 0436 660F      		lsl r22
 863 0438 695F      		subi r22,lo8(-(7))
 864               	.LBB29:
 865               	.LBB26:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 866               		.loc 1 57 0
 867 043a CC24      		clr r12
 868 043c C394      		inc r12
 869 043e D12C      		mov r13,__zero_reg__
 870 0440 EC2C      		mov r14,r12
 871 0442 00C0      		rjmp 2f
 872               		1:
 873 0444 EE0C      		lsl r14
 874               		2:
 875 0446 6A95      		dec r22
 876 0448 02F4      		brpl 1b
 877               	.LBE26:
 878               	.LBE29:
 241:../../../os/hal/platforms/AVR/pwm_lld.c **** 	pwm_configure_hw_channel(&TCCR1A,7-2*channel,6-2*channel,pwmp->config->channels[channel].mode);
 879               		.loc 1 241 0
 880 044a 63E0      		ldi r22,lo8(3)
 881 044c 70E0      		ldi r23,0
 882 044e 641B      		sub r22,r20
 883 0450 750B      		sbc r23,r21
 884 0452 660F      		lsl r22
 885               	.LBB30:
 886               	.LBB27:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 887               		.loc 1 57 0
 888 0454 062E      		mov r0,r22
 889 0456 00C0      		rjmp 2f
 890               		1:
 891 0458 CC0C      		lsl r12
 892               		2:
 893 045a 0A94      		dec r0
 894 045c 02F4      		brpl 1b
 895 045e CE28      		or r12,r14
 896 0460 7C2D      		mov r23,r12
 897 0462 7095      		com r23
 898 0464 7B21      		and r23,r11
 899 0466 7093 8000 		sts 128,r23
  58:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_HIGH ==mode )
 900               		.loc 1 58 0
 901 046a 8130      		cpi r24,1
 902 046c 9105      		cpc r25,__zero_reg__
 903 046e A105      		cpc r26,__zero_reg__
 904 0470 B105      		cpc r27,__zero_reg__
 905 0472 01F4      		brne .+2
 906 0474 00C0      		rjmp .L84
 907               	.LVL50:
  60:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_LOW ==mode)
 908               		.loc 1 60 0
 909 0476 0297      		sbiw r24,2
 910 0478 A105      		cpc r26,__zero_reg__
 911 047a B105      		cpc r27,__zero_reg__
 912 047c 01F4      		brne .L57
  61:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    *TCCRnA |= (1<<COMnx1) | (1<<COMnx0); //inverting mode 
 913               		.loc 1 61 0
 914 047e 8091 8000 		lds r24,128
 915               	.LVL51:
 916 0482 8C29      		or r24,r12
 917 0484 8093 8000 		sts 128,r24
 918               	.L57:
 919               	.LBE27:
 920               	.LBE30:
 242:../../../os/hal/platforms/AVR/pwm_lld.c **** 	TIMSK1 |= (1<< (channel + 1));
 921               		.loc 1 242 0
 922 0488 A091 6F00 		lds r26,111
 923               	.LVL52:
 924 048c BA01      		movw r22,r20
 925 048e 6F5F      		subi r22,-1
 926 0490 7F4F      		sbci r23,-1
 927 0492 81E0      		ldi r24,lo8(1)
 928 0494 90E0      		ldi r25,0
 929 0496 062E      		mov r0,r22
 930 0498 00C0      		rjmp 2f
 931               		1:
 932 049a 880F      		lsl r24
 933               		2:
 934 049c 0A94      		dec r0
 935 049e 02F4      		brpl 1b
 936 04a0 A82B      		or r26,r24
 937 04a2 A093 6F00 		sts 111,r26
 243:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(pwmp->config->channels[channel].callback != NULL)
 938               		.loc 1 243 0
 939 04a6 E40F      		add r30,r20
 940 04a8 F51F      		adc r31,r21
 941               	.LVL53:
 942 04aa EE0F      		lsl r30
 943 04ac FF1F      		rol r31
 944 04ae EC0F      		add r30,r28
 945 04b0 FD1F      		adc r31,r29
 946 04b2 8485      		ldd r24,Z+12
 947 04b4 9585      		ldd r25,Z+13
 948 04b6 892B      		or r24,r25
 949 04b8 01F4      		brne .+2
 950 04ba 00C0      		rjmp .L53
 244:../../../os/hal/platforms/AVR/pwm_lld.c **** 	switch(channel){
 951               		.loc 1 244 0
 952 04bc F110      		cpse r15,__zero_reg__
 953 04be 00C0      		rjmp .L85
 245:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  case 0: OCR1A = val;break;
 954               		.loc 1 245 0
 955 04c0 1093 8900 		sts 136+1,r17
 956 04c4 0093 8800 		sts 136,r16
 957 04c8 00C0      		rjmp .L53
 958               	.L85:
 244:../../../os/hal/platforms/AVR/pwm_lld.c **** 	switch(channel){
 959               		.loc 1 244 0
 960 04ca 81E0      		ldi r24,lo8(1)
 961 04cc F812      		cpse r15,r24
 962 04ce 00C0      		rjmp .L53
 246:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  case 1: OCR1B = val;break;
 963               		.loc 1 246 0
 964 04d0 1093 8B00 		sts 138+1,r17
 965 04d4 0093 8A00 		sts 138,r16
 966 04d8 00C0      		rjmp .L53
 967               	.LVL54:
 968               	.L81:
 969               	.LBB31:
 970               	.LBB18:
  61:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    *TCCRnA |= (1<<COMnx1) | (1<<COMnx0); //inverting mode 
 971               		.loc 1 61 0
 972 04da 8091 B000 		lds r24,176
 973               	.LVL55:
 974 04de 806C      		ori r24,lo8(-64)
 975 04e0 8093 B000 		sts 176,r24
 976 04e4 00C0      		rjmp .L64
 977               	.LVL56:
 978               	.L83:
 979               	.LBE18:
 980               	.LBE31:
 981               	.LBB32:
 982               	.LBB22:
 983 04e6 8091 B000 		lds r24,176
 984               	.LVL57:
 985 04ea 8063      		ori r24,lo8(48)
 986 04ec 8093 B000 		sts 176,r24
 987 04f0 00C0      		rjmp .L67
 988               	.LVL58:
 989               	.L84:
 990               	.LBE22:
 991               	.LBE32:
 992               	.LBB33:
 993               	.LBB28:
  59:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    *TCCRnA |=  ((1<<COMnx1) | (0<<COMnx0)); //non inverting mode
 994               		.loc 1 59 0
 995 04f2 8091 8000 		lds r24,128
 996               	.LVL59:
 997 04f6 8E29      		or r24,r14
 998 04f8 8093 8000 		sts 128,r24
 999 04fc 00C0      		rjmp .L57
 1000               	.LVL60:
 1001               	.L80:
 1002               	.LBE28:
 1003               	.LBE33:
 1004               	.LBB34:
 1005               	.LBB19:
 1006 04fe 8091 B000 		lds r24,176
 1007               	.LVL61:
 1008 0502 8068      		ori r24,lo8(-128)
 1009 0504 8093 B000 		sts 176,r24
 1010 0508 00C0      		rjmp .L64
 1011               	.LVL62:
 1012               	.L82:
 1013               	.LBE19:
 1014               	.LBE34:
 1015               	.LBB35:
 1016               	.LBB23:
 1017 050a 8091 B000 		lds r24,176
 1018               	.LVL63:
 1019 050e 8062      		ori r24,lo8(32)
 1020 0510 8093 B000 		sts 176,r24
 1021 0514 00C0      		rjmp .L67
 1022               	.LBE23:
 1023               	.LBE35:
 1024               	.LFE18:
 1026               	.global	pwm_lld_disable_channel
 1028               	pwm_lld_disable_channel:
 1029               	.LFB19:
 279:../../../os/hal/platforms/AVR/pwm_lld.c **** 
 280:../../../os/hal/platforms/AVR/pwm_lld.c **** /**
 281:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @brief   Disables a PWM channel.
 282:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @pre     The PWM unit must have been activated using @p pwmStart().
 283:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @post    The channel is disabled and its output line returned to the
 284:../../../os/hal/platforms/AVR/pwm_lld.c ****  *          idle state.
 285:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @note    Depending on the hardware implementation this function has
 286:../../../os/hal/platforms/AVR/pwm_lld.c ****  *          effect starting on the next cycle (recommended implementation)
 287:../../../os/hal/platforms/AVR/pwm_lld.c ****  *          or immediately (fallback implementation).
 288:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 289:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] pwmp      pointer to a @p PWMDriver object
 290:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @param[in] channel   PWM channel identifier (0...PWM_CHANNELS-1)
 291:../../../os/hal/platforms/AVR/pwm_lld.c ****  *
 292:../../../os/hal/platforms/AVR/pwm_lld.c ****  * @notapi
 293:../../../os/hal/platforms/AVR/pwm_lld.c ****  */
 294:../../../os/hal/platforms/AVR/pwm_lld.c **** void pwm_lld_disable_channel(PWMDriver *pwmp, pwmchannel_t channel) {
 1030               		.loc 1 294 0
 1031               	.LVL64:
 1032               	/* prologue: function */
 1033               	/* frame size = 0 */
 1034               	/* stack size = 0 */
 1035               	.L__stack_usage = 0
 295:../../../os/hal/platforms/AVR/pwm_lld.c ****   //TODO disable interrupts
 296:../../../os/hal/platforms/AVR/pwm_lld.c **** #if USE_AVR_PWM1 || defined(__DOXYGEN__)
 297:../../../os/hal/platforms/AVR/pwm_lld.c ****   if(pwmp == &PWMD1)
 1036               		.loc 1 297 0
 1037 0516 20E0      		ldi r18,hi8(PWMD1)
 1038 0518 8030      		cpi r24,lo8(PWMD1)
 1039 051a 9207      		cpc r25,r18
 1040 051c 01F4      		brne .+2
 1041 051e 00C0      		rjmp .L96
 298:../../../os/hal/platforms/AVR/pwm_lld.c ****       {   
 299:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(channel == 0)
 300:../../../os/hal/platforms/AVR/pwm_lld.c **** 	{
 301:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR1A,COM1A1,COM1A0,PWM_OUTPUT_DISABLED);
 302:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TIMSK1 &= ~(1<<OCIE1A);
 303:../../../os/hal/platforms/AVR/pwm_lld.c **** 	}
 304:../../../os/hal/platforms/AVR/pwm_lld.c **** 	else
 305:../../../os/hal/platforms/AVR/pwm_lld.c **** 	{
 306:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR1A,COM1B1,COM1B0,PWM_OUTPUT_DISABLED);
 307:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TIMSK1 &= ~(1<<OCIE1B);
 308:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  
 309:../../../os/hal/platforms/AVR/pwm_lld.c **** 	}
 310:../../../os/hal/platforms/AVR/pwm_lld.c ****       }
 311:../../../os/hal/platforms/AVR/pwm_lld.c **** #endif
 312:../../../os/hal/platforms/AVR/pwm_lld.c **** #if USE_AVR_PWM2 || defined(__DOXYGEN__)
 313:../../../os/hal/platforms/AVR/pwm_lld.c ****   if(pwmp == &PWMD2)
 1042               		.loc 1 313 0
 1043 0520 8050      		subi r24,lo8(PWMD2)
 1044 0522 9040      		sbci r25,hi8(PWMD2)
 1045 0524 01F0      		breq .L97
 1046 0526 0895      		ret
 1047               	.L97:
 314:../../../os/hal/platforms/AVR/pwm_lld.c ****       {   
 315:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(channel == 0)
 316:../../../os/hal/platforms/AVR/pwm_lld.c **** 	{
 317:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR2A,COM2A1,COM2A0,pwmp->config->channels[0].mode);
 1048               		.loc 1 317 0
 1049 0528 E091 0000 		lds r30,PWMD2+1
 1050 052c F091 0000 		lds r31,PWMD2+1+1
 315:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(channel == 0)
 1051               		.loc 1 315 0
 1052 0530 6111      		cpse r22,__zero_reg__
 1053 0532 00C0      		rjmp .L91
 1054               		.loc 1 317 0
 1055 0534 8085      		ldd r24,Z+8
 1056 0536 9185      		ldd r25,Z+9
 1057 0538 A285      		ldd r26,Z+10
 1058 053a B385      		ldd r27,Z+11
 1059               	.LVL65:
 1060               	.LBB36:
 1061               	.LBB37:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 1062               		.loc 1 57 0
 1063 053c 2091 B000 		lds r18,176
 1064 0540 2F73      		andi r18,lo8(63)
 1065 0542 2093 B000 		sts 176,r18
  58:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_HIGH ==mode )
 1066               		.loc 1 58 0
 1067 0546 8130      		cpi r24,1
 1068 0548 9105      		cpc r25,__zero_reg__
 1069 054a A105      		cpc r26,__zero_reg__
 1070 054c B105      		cpc r27,__zero_reg__
 1071 054e 01F4      		brne .+2
 1072 0550 00C0      		rjmp .L98
  60:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_LOW ==mode)
 1073               		.loc 1 60 0
 1074 0552 0297      		sbiw r24,2
 1075 0554 A105      		cpc r26,__zero_reg__
 1076 0556 B105      		cpc r27,__zero_reg__
 1077 0558 01F4      		brne .L93
  61:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    *TCCRnA |= (1<<COMnx1) | (1<<COMnx0); //inverting mode 
 1078               		.loc 1 61 0
 1079 055a 8091 B000 		lds r24,176
 1080               	.LVL66:
 1081 055e 806C      		ori r24,lo8(-64)
 1082 0560 8093 B000 		sts 176,r24
 1083               	.L93:
 1084               	.LBE37:
 1085               	.LBE36:
 318:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TIMSK2 &= ~(1<<OCIE2A);
 1086               		.loc 1 318 0
 1087 0564 8091 7000 		lds r24,112
 1088 0568 8D7F      		andi r24,lo8(-3)
 1089 056a 8093 7000 		sts 112,r24
 1090 056e 0895      		ret
 1091               	.LVL67:
 1092               	.L91:
 319:../../../os/hal/platforms/AVR/pwm_lld.c **** 	}
 320:../../../os/hal/platforms/AVR/pwm_lld.c **** 	else
 321:../../../os/hal/platforms/AVR/pwm_lld.c **** 	{
 322:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  pwm_configure_hw_channel(&TCCR2A,COM2B1,COM2B0,pwmp->config->channels[1].mode);
 1093               		.loc 1 322 0
 1094 0570 8685      		ldd r24,Z+14
 1095 0572 9785      		ldd r25,Z+15
 1096 0574 A089      		ldd r26,Z+16
 1097 0576 B189      		ldd r27,Z+17
 1098               	.LVL68:
 1099               	.LBB39:
 1100               	.LBB40:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 1101               		.loc 1 57 0
 1102 0578 2091 B000 		lds r18,176
 1103 057c 2F7C      		andi r18,lo8(-49)
 1104 057e 2093 B000 		sts 176,r18
  58:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_HIGH ==mode )
 1105               		.loc 1 58 0
 1106 0582 8130      		cpi r24,1
 1107 0584 9105      		cpc r25,__zero_reg__
 1108 0586 A105      		cpc r26,__zero_reg__
 1109 0588 B105      		cpc r27,__zero_reg__
 1110 058a 01F0      		breq .L99
  60:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  if(PWM_OUTPUT_ACTIVE_LOW ==mode)
 1111               		.loc 1 60 0
 1112 058c 0297      		sbiw r24,2
 1113 058e A105      		cpc r26,__zero_reg__
 1114 0590 B105      		cpc r27,__zero_reg__
 1115 0592 01F0      		breq .L100
 1116               	.LVL69:
 1117               	.L95:
 1118               	.LBE40:
 1119               	.LBE39:
 323:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TIMSK2 &= ~(1<<OCIE2B);
 1120               		.loc 1 323 0
 1121 0594 8091 7000 		lds r24,112
 1122 0598 8B7F      		andi r24,lo8(-5)
 1123 059a 8093 7000 		sts 112,r24
 1124 059e 0895      		ret
 1125               	.LVL70:
 1126               	.L96:
 1127               	.LBB43:
 1128               	.LBB44:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 1129               		.loc 1 57 0
 1130 05a0 8091 8000 		lds r24,128
 1131               	.LVL71:
 1132               	.LBE44:
 1133               	.LBE43:
 299:../../../os/hal/platforms/AVR/pwm_lld.c **** 	if(channel == 0)
 1134               		.loc 1 299 0
 1135 05a4 6111      		cpse r22,__zero_reg__
 1136 05a6 00C0      		rjmp .L88
 1137               	.LVL72:
 1138               	.LBB46:
 1139               	.LBB45:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 1140               		.loc 1 57 0
 1141 05a8 8F73      		andi r24,lo8(63)
 1142 05aa 8093 8000 		sts 128,r24
 1143               	.LBE45:
 1144               	.LBE46:
 302:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TIMSK1 &= ~(1<<OCIE1A);
 1145               		.loc 1 302 0
 1146 05ae 8091 6F00 		lds r24,111
 1147 05b2 8D7F      		andi r24,lo8(-3)
 1148 05b4 8093 6F00 		sts 111,r24
 1149 05b8 0895      		ret
 1150               	.LVL73:
 1151               	.L88:
 1152               	.LBB47:
 1153               	.LBB48:
  57:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  *TCCRnA &= ~((1<<COMnx1) | (1<<COMnx0)); 
 1154               		.loc 1 57 0
 1155 05ba 8F7C      		andi r24,lo8(-49)
 1156 05bc 8093 8000 		sts 128,r24
 1157               	.LBE48:
 1158               	.LBE47:
 307:../../../os/hal/platforms/AVR/pwm_lld.c **** 	  TIMSK1 &= ~(1<<OCIE1B);
 1159               		.loc 1 307 0
 1160 05c0 8091 6F00 		lds r24,111
 1161 05c4 8B7F      		andi r24,lo8(-5)
 1162 05c6 8093 6F00 		sts 111,r24
 1163 05ca 0895      		ret
 1164               	.LVL74:
 1165               	.L100:
 1166               	.LBB49:
 1167               	.LBB41:
  61:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    *TCCRnA |= (1<<COMnx1) | (1<<COMnx0); //inverting mode 
 1168               		.loc 1 61 0
 1169 05cc 8091 B000 		lds r24,176
 1170               	.LVL75:
 1171 05d0 8063      		ori r24,lo8(48)
 1172 05d2 8093 B000 		sts 176,r24
 1173 05d6 00C0      		rjmp .L95
 1174               	.LVL76:
 1175               	.L98:
 1176               	.LBE41:
 1177               	.LBE49:
 1178               	.LBB50:
 1179               	.LBB38:
  59:../../../os/hal/platforms/AVR/pwm_lld.c **** 	    *TCCRnA |=  ((1<<COMnx1) | (0<<COMnx0)); //non inverting mode
 1180               		.loc 1 59 0
 1181 05d8 8091 B000 		lds r24,176
 1182               	.LVL77:
 1183 05dc 8068      		ori r24,lo8(-128)
 1184 05de 8093 B000 		sts 176,r24
 1185 05e2 00C0      		rjmp .L93
 1186               	.LVL78:
 1187               	.L99:
 1188               	.LBE38:
 1189               	.LBE50:
 1190               	.LBB51:
 1191               	.LBB42:
 1192 05e4 8091 B000 		lds r24,176
 1193               	.LVL79:
 1194 05e8 8062      		ori r24,lo8(32)
 1195 05ea 8093 B000 		sts 176,r24
 1196 05ee 00C0      		rjmp .L95
 1197               	.LBE42:
 1198               	.LBE51:
 1199               	.LFE19:
 1201               		.comm	PWMD2,5,1
 1202               		.comm	PWMD1,5,1
 1875               	.Letext0:
 1876               		.file 2 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 1877               		.file 3 "../../../os/ports/GCC/AVR/chtypes.h"
 1878               		.file 4 "../../../os/hal/include/pwm.h"
 1879               		.file 5 "../../../os/hal/platforms/AVR/pwm_lld.h"
 1880               		.file 6 "../../../os/kernel/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 pwm_lld.c
     /tmp/ccT4SiQt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccT4SiQt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccT4SiQt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccT4SiQt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccT4SiQt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccT4SiQt.s:11     .text:0000000000000000 __vector_15
                            *COM*:0000000000000005 PWMD1
     /tmp/ccT4SiQt.s:92     .text:0000000000000062 __vector_13
     /tmp/ccT4SiQt.s:172    .text:00000000000000c4 __vector_14
     /tmp/ccT4SiQt.s:252    .text:0000000000000126 __vector_11
                            *COM*:0000000000000005 PWMD2
     /tmp/ccT4SiQt.s:332    .text:0000000000000188 __vector_9
     /tmp/ccT4SiQt.s:412    .text:00000000000001ea __vector_10
     /tmp/ccT4SiQt.s:492    .text:000000000000024c pwm_lld_init
     /tmp/ccT4SiQt.s:525    .text:0000000000000274 pwm_lld_start
     /tmp/ccT4SiQt.s:594    .text:00000000000002d8 pwm_lld_stop
     /tmp/ccT4SiQt.s:635    .text:0000000000000308 pwm_lld_change_period
     /tmp/ccT4SiQt.s:648    .text:000000000000030a pwm_lld_enable_channel
     /tmp/ccT4SiQt.s:1028   .text:0000000000000516 pwm_lld_disable_channel

UNDEFINED SYMBOLS
chSchIsPreemptionRequired
chSchDoReschedule
pwmObjectInit
__udivmodsi4
__do_clear_bss
